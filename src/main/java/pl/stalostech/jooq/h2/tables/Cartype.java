/**
 * This class is generated by jOOQ
 */
package pl.stalostech.jooq.h2.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import pl.stalostech.jooq.h2.Keys;
import pl.stalostech.jooq.h2.Public;
import pl.stalostech.jooq.h2.tables.records.CartypeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cartype extends TableImpl<CartypeRecord> {

	private static final long serialVersionUID = 1997031116;

	/**
	 * The reference instance of <code>PUBLIC.CARTYPE</code>
	 */
	public static final Cartype CARTYPE = new Cartype();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<CartypeRecord> getRecordType() {
		return CartypeRecord.class;
	}

	/**
	 * The column <code>PUBLIC.CARTYPE.ID</code>.
	 */
	public final TableField<CartypeRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.CARTYPE.DOORS</code>.
	 */
	public final TableField<CartypeRecord, Integer> DOORS = createField("DOORS", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.CARTYPE.MODEL</code>.
	 */
	public final TableField<CartypeRecord, String> MODEL = createField("MODEL", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.CARTYPE.AVAILABLE_YEAR</code>.
	 */
	public final TableField<CartypeRecord, Date> AVAILABLE_YEAR = createField("AVAILABLE_YEAR", org.jooq.impl.SQLDataType.DATE, this, "");

	/**
	 * Create a <code>PUBLIC.CARTYPE</code> table reference
	 */
	public Cartype() {
		this("CARTYPE", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.CARTYPE</code> table reference
	 */
	public Cartype(String alias) {
		this(alias, CARTYPE);
	}

	private Cartype(String alias, Table<CartypeRecord> aliased) {
		this(alias, aliased, null);
	}

	private Cartype(String alias, Table<CartypeRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<CartypeRecord, Integer> getIdentity() {
		return Keys.IDENTITY_CARTYPE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<CartypeRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_4;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<CartypeRecord>> getKeys() {
		return Arrays.<UniqueKey<CartypeRecord>>asList(Keys.CONSTRAINT_4);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Cartype as(String alias) {
		return new Cartype(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Cartype rename(String name) {
		return new Cartype(name, null);
	}
}
